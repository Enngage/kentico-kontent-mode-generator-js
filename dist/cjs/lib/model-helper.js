"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.modelHelper = exports.ModelHelper = void 0;
const kontent_delivery_1 = require("@kentico/kontent-delivery");
const package_json_1 = require("../package.json");
class ModelHelper {
    getFilename(data) {
        return `${data.type.system.codename}.ts`;
    }
    getClassDefinition(data) {
        const code = `
import { IContentItem, Elements } from '@kentico/kontent-delivery';

/**
 * Autogenerated by '${package_json_1.name}@${package_json_1.version}' at '${new Date().toUTCString()}'
*/
export type ${data.type.system.codename} = IContentItem<{
    ${this.getElementsCode({
            type: data.type
        })}
}>;
`;
        return code;
    }
    getElementsCode(data) {
        let code = '';
        for (const element of data.type.elements) {
            code += `${element.codename}: Elements.${this.mapElementTypeToName(element.type)};`;
        }
        return code;
    }
    mapElementTypeToName(elementType) {
        let result = '';
        if (elementType.toLowerCase() === kontent_delivery_1.ElementType.Text.toLowerCase()) {
            result = 'TextElement';
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.Number.toLowerCase()) {
            result = 'NumberElement';
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.ModularContent.toLowerCase()) {
            result = `LinkedItemsElement<IContentItem>`;
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.Asset.toLowerCase()) {
            result = 'AssetsElement';
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.DateTime.toLowerCase()) {
            result = 'DateTimeElement';
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.RichText.toLowerCase()) {
            result = 'RichTextElement';
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.MultipleChoice.toLowerCase()) {
            result = 'MultipleChoiceElement';
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.UrlSlug.toLowerCase()) {
            result = 'UrlSlugElement';
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.Taxonomy.toLowerCase()) {
            result = 'TaxonomyElement';
        }
        else if (elementType.toLowerCase() === kontent_delivery_1.ElementType.Custom.toLowerCase()) {
            result = 'CustomElement';
        }
        else {
            console.warn(`Unsupported element type '${elementType}'`);
        }
        return result;
    }
}
exports.ModelHelper = ModelHelper;
exports.modelHelper = new ModelHelper();
//# sourceMappingURL=model-helper.js.map