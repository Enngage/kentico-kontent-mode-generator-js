import { IContentType, ElementType } from '@kentico/kontent-delivery';
import { name, version } from '../package.json';

export class ModelHelper {
    getFilename(data: { type: IContentType }): string {
        return `${data.type.system.codename}.ts`;
    }

    getClassDefinition(data: { type: IContentType; addTimestamp: boolean }): string {
        const code = `
import { IContentItem, Elements } from '@kentico/kontent-delivery';

/**
 * Generated by '${name}@${version}' at '${new Date().toUTCString()}'
*/
export type ${data.type.system.codename} = IContentItem<{
    ${this.getElementsCode({
        type: data.type
    })}
}>;
`;

        return code;
    }

    private getElementsCode(data: { type: IContentType }): string {
        let code = '';
        for (const element of data.type.elements) {
            code += `${element.codename}: Elements.${this.mapElementTypeToName(element.type)};`;
        }

        return code;
    }

    private mapElementTypeToName(elementType: string): string {
        let result: string = '';
        if (elementType.toLowerCase() === ElementType.Text.toLowerCase()) {
            result = 'TextElement';
        } else if (elementType.toLowerCase() === ElementType.Number.toLowerCase()) {
            result = 'NumberElement';
        } else if (elementType.toLowerCase() === ElementType.ModularContent.toLowerCase()) {
            result = `LinkedItemsElement<IContentItem>`;
        } else if (elementType.toLowerCase() === ElementType.Asset.toLowerCase()) {
            result = 'AssetsElement';
        } else if (elementType.toLowerCase() === ElementType.DateTime.toLowerCase()) {
            result = 'DateTimeElement';
        } else if (elementType.toLowerCase() === ElementType.RichText.toLowerCase()) {
            result = 'RichTextElement';
        } else if (elementType.toLowerCase() === ElementType.MultipleChoice.toLowerCase()) {
            result = 'MultipleChoiceElement';
        } else if (elementType.toLowerCase() === ElementType.UrlSlug.toLowerCase()) {
            result = 'UrlSlugElement';
        } else if (elementType.toLowerCase() === ElementType.Taxonomy.toLowerCase()) {
            result = 'TaxonomyElement';
        } else if (elementType.toLowerCase() === ElementType.Custom.toLowerCase()) {
            result = 'CustomElement';
        } else {
            console.warn(`Unsupported element type '${elementType}'`);
        }
        return result;
    }
}

export const modelHelper = new ModelHelper();
